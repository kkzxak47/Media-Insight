services:
  ml_models:
    container_name: ml_models_mediainsight
    build:
      context: ./backend
      dockerfile: Dockerfile-ml-models
    image: kkzxak47/ml_models_mediainsight
    environment:
      - MONGODB_URI=mongodb://mongoadmin:mongosecret@mongodb:27017/
      - MONGODB_DB=mediainsight
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
    networks:
      - mediainsight_network
    depends_on:
      - mongodb
      - kafka
    volumes:
      - ./backend:/app
  web:
    container_name: flask_mediainsight
    build: ./backend
    image: kkzxak47/flask_mediainsight
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    environment:
      - FLASK_APP=mediainsight.py
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_DEBUG=1
      - FLASK_ENV=development
      - MONGODB_URI=mongodb://mongoadmin:mongosecret@mongodb:27017/
      - MONGODB_DB=mediainsight
      - SECRET_KEY=you-will-never-guess-so
      - SQLALCHEMY_DATABASE_URI=sqlite:///mediainsight.db
      - SQLALCHEMY_TRACK_MODIFICATIONS=False
      - LOG_TO_STDOUT=True
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9094
    networks:
      - mediainsight_network
    depends_on:
      - mongodb
      - kafka
  react_app:
    container_name: react_mediainsight
    build: ./frontend/mediainsight_ui
    image: kkzxak47/react_mediainsight
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/mediainsight_ui:/usr/src/app
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - mediainsight_network
  # MongoDB Service
  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongodb_mediainsight
    networks:
      - mediainsight_network
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: mongosecret
    volumes:
      - mongo_data:/data/db

  # Kafka Service in KRaft Mode
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka_mediainsight
    networks:
      - mediainsight_network
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka/data

  # Kafka-UI Service
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui_mediainsight
    networks:
      - mediainsight_network
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
    depends_on:
      - kafka

# Define the custom network
networks:
  mediainsight_network:


# Define persistent volumes
volumes:
  mongo_data:
  kafka_data:
